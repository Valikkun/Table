import R from 'ramda'

const initialState = {
	fetching: false,
	sort: 'id',
	reverse: false,
	search: '',
	select: null,
	page: 1,
	failure: false,
	scroll: 0,
}

export default (state = initialState, {type, payload}) => {
	switch (type) {
		case 'FETCH_TABLE_START':
			return R.merge(state, {fetching: true, page: 1})
		case 'FETCH_TABLE_SUCCESS':
			return R.merge(state, {fetching: false, failure: false})
		case 'FETCH_TABLE_FAILURE':
			return R.merge(state, {fetching: false, failure: true})
 	 	case 'SORT':
 	 		if(state.sort === payload) {
 	 			return R.merge(state, {reverse: !state.reverse})
 	 		} else {
 	 			return R.merge(state, {sort: payload, reverse: false})
 	 		}
		case 'LOAD_PAGE':
			return R.merge(state, {page: payload})
	 	case 'SEARCH':
	 		return R.merge(state, {search: payload})
 		case 'SELECT':
 			return R.merge(state, {select: payload})
		case 'DESELECT':
			return R.merge(state, {select: null})
		case 'SCROLL':
			return R.merge(state, {scroll: payload})
 	 	default:
 	 		return state
	}
}