import R from 'ramda'

export const getTableById = (state, id) => R.prop(id, state.table)

export const getTableLength = (state) => {

  const applySearch = (item) => R.contains(
    state.tablePage.search,
    R.props(['id', 'firstName', 'lastName', 'email', 'phone'], item).toString(),
  )

  const table = R.compose(
    R.length(),
    R.filter(applySearch),
    R.map(id => getTableById(state, id))
  )(state.tablePage.ids)

  return table
}

  


export const getTable = (state) => {
  const sortState = state.tablePage.sort
  const sort = (a, b) => {
  	if(isNaN(a[sortState])) {
  		if(!state.tablePage.reverse) {
  			return a[sortState] > b[sortState] ? 1 : -1 
  		} else {
  			return a[sortState] < b[sortState] ? 1 : -1 
  		}
  	} else {
  		if(!state.tablePage.reverse) {
  			return a[sortState] - b[sortState]
  		} else {
  			return b[sortState] - a[sortState]
  		}	
  	}
  }

  const applySearch = (item) => R.contains(
    state.tablePage.search,
    R.props(['id', 'firstName', 'lastName', 'email', 'phone'], item).toString(),
  )

  const table = R.compose(
    R.slice((state.tablePage.page-1)*50, state.tablePage.page*50),
    R.sort(sort),
    R.filter(applySearch),
    R.map(id => getTableById(state, id))
  )(state.tablePage.ids)

  return table
}

